name: SoapUI TestRunner

on:
  workflow_call:
    inputs:
      image-build-artifact-name:
        type: string
        description: >
          Name of the build artifact uploaded in a previous job that contains the exported Tarball of the built Docker Image.

          When loading the image from a Tarball the `image-tarball-file` also needs to be provided. 
        required: false
      image-tarball-file:
        type: string
        description: >
          Path and filename of exported Docker Image Tarball uploaded in a previous job.

          When loading the image from a Tarball the `image-build-artifact-name` also needs to be provided.
        required: false
      project-dir:
        type: string
        description: >
          Absolute path to project folder.

          Default: ${PWD}
        required: false
        default: '${PWD}'
      soapui-project:
        type: string
        description: >
          Filename of the SoapUI project file.

          Warning: Is is very strongly recommended to have the SoapUI project file at the root of the project.
        required: true
      reports-dir:
        type: string
        description: >
          Directory relative to project directory for writing test reports to.

          Default: <project-dir>/soapui-reports
        required: false
        default: 'soapui-reports'
      properties-file:
        type: string
        description: >
          Path to optional properties file relative to the project folder. Properties should be formatted as a <key>=<value> per line.
          Properties will be loaded as 'Global' properties, which can be references within the project by `${<key>}`, `${#Global#<key>}` or `${#System#<key>}`.

          Default: <project-dir>/soapui.ci.properties
        required: false
        default: 'soapui.ci.properties'
      soapui-cmd-options-args:
        type: string
        description: >
          Command-line option arguments for SoapUI. '-f' is already provided by `reports-dir`.
          Refer to [TestRunner Command-Line Arguments](https://www.soapui.org/docs/test-automation/running-from-command-line/functional-tests/)
          for all the available arguments.

          Note: Many arguments, in particular report format related arguments, seem to not work.
          Default: -a -A -j -r
        default: '-a -A -j -r'
      soapui-version:
        type: string
        description: >
          SoapUI version.

          Default: latest
        required: false
        default: 'latest'
      image-id:
        type: string
        description: >
          Image id of the newly built Docker Image in CI. This is the most reliable way to make sure the 
          correct Docker Image is used. This usually returned as output variable from a Docker build job.

          Only one of `image-id` or `image-name` is required, but both are allowed.
        required: true
      image-name:
        type: string
        description: >
          Image name of the newly built Docker Image in CI. This needs to be in the format `<organisation>/<image>` 
          without a version. This is used in a `docker ps --latest -aqf ancestor=<image-name> --no-trunc` to obtain
          the container id of the application under test.

          Only one of `image-id` or `image-name` is required, but both are allowed.
        required: false
      setup-script:
        type: string
        description: >
          A 'Setup' script to bring up the application/environment under test. The script must be non-blocking.

          Examples:
          Docker Compose(with `service.image: ${IMAGE_ID:-${IMAGE_TAG:-<organisation>/<image-name>}}`):
          ```bash
            docker compose -f 'compose.frank.yaml' -f 'compose.frank.ci.yaml' up -d
          ```
          Docker:
          ```bash
            docker run -d ${IMAGE_ID:-${IMAGE_TAG:-<organisation>/<image-name>}}
          ```

          Warning: It is very important that the Docker image built in CI is used. The 'Setup' script should never build the Docker Image.
          The environment variables `IMAGE_ID` and/or `IMAGE_TAG` are available in the 'Setup' script depending on which one is provided to
          this workflow. Alternatively `<organisation>/<image-name>` without a version should resolve to the only image with that name that
          is available in the CI/CD runner.
        required: false
      teardown-script:
        type: string
        description: >
          A 'Teardown' script to stop and cleanup up the application/environment under test. The script must be non-blocking.

          The environment variable `CONTAINER_ID` is made available for stopping/cleaning up the used container afterwards.

          Examples:
          Docker Compose:
          ```bash
            docker compose -f 'compose.frank.yaml' -f 'compose.frank.ci.yaml' down -v
          ```
          Docker:
          ```bash
            docker stop ${IMAGE_ID:-${IMAGE_TAG:-<organisation>/<image-name>}}
          ```
        required: false
      upload-reports-artifact:
        type: boolean
        description: >
          When 'true', the SoapUI reports will be uploaded as a GitHub Artifact

          Default: true
        required: false
        default: true
      reports-artifact-name:
        type: string
        description: >
          Name of the GitHub Artifact the SoapUI reports should be uploaded under.

          Default: reports-soapui-testreports
        required: false
        default: 'reports-soapui-testreports'
    secrets:
      token:
        required: true

jobs:
  soapui-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
        with:
          token: ${{secrets.token}}

      - name: Download Docker tar
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e #4.2.1
        if: inputs.image-build-artifact-name != ''
        with:
          name: ${{inputs.image-build-artifact-name}}

      - name: Load Docker tar
        if: inputs.image-tarball-file != ''
        shell: bash
        env:
          TARBALL_FILE: ${{inputs.image-tarball-file}}
        run: |
          docker load --input "$TARBALL_FILE"
          docker images -a

      - name: Setup Test Environment
        if: inputs.setup-script != ''
        shell: bash
        env:
          IMAGE_ID: ${{inputs.image-id}}
          IMAGE_TAG: ${{inputs.image-name}}
        run: "${{inputs.setup-script}}"
      
      - name: Wait Till Healthy Container
        id: wait-till-healthy
        uses: wearefrank/ci-cd-templates/wait-till-healthy-container@2f83b83141c47c3141586b6d6abd5f4bd2dffee7 #2.0.0
        with:
          image-id: ${{inputs.image-id}}
          image-name: ${{inputs.image-name}}

      - name: SoapUI TestRunner
        uses: wearefrank/ci-cd-templates/soapui-testrunner@e336eae9ed5c96c1b9a89b07268f1ab508bcd5e2 #2.0.7
        timeout-minutes: 15
        with:
          project-dir: ${{inputs.project-dir}}
          soapui-project: ${{inputs.soapui-project}}
          reports-dir: ${{inputs.reports-dir}}
          properties-file: ${{inputs.properties-file}}
          soapui-cmd-options-args: ${{inputs.soapui-cmd-options-args}}
          soapui-version: ${{inputs.soapui-version}}
          upload-reports-artifact: ${{inputs.upload-reports-artifact}}
          reports-artifact-name: ${{inputs.reports-artifact-name}}
      
      - name: Docker inspect, stats and logs
        if: failure() || runner.debug == '1'
        env:
          CONTAINER_ID: ${{steps.wait-till-healthy.outputs.container-id}}
        shell: bash
        run: |
          docker inspect "$CONTAINER_ID"
          docker logs "$CONTAINER_ID"
          docker stats --no-stream "$CONTAINER_ID"
      
      - name: Teardown Test Environment
        if: always() && inputs.teardown-script != ''
        shell: bash
        env:
          CONTAINER_ID: ${{steps.wait-till-healthy.outputs.container-id}}
        run: "${{inputs.teardown-script}}"
