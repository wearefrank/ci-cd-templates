name: "Docker Continuous Integration - Generic"

on:
  workflow_call:
    inputs:
      registry-prefix:
        description: Image registry prefix (e.g. ghcr.io, docker.io)
        type: string
        required: false
        default: 'ghcr.io'
      docker-image-repo:
        description: Docker image repository. Default -> GitHub repository owner/organisation.
        type: string
        required: false
        default: ${{ github.repository_owner }}
      docker-image-name:
        description: Docker image name. Default -> GitHub repository name.
        type: string
        required: false
        default: ${{ github.event.repository.name }}
      version:
        type: string
        required: false
        description: Semvers string. If empty, the ref/tag will be used (if on.tag trigger).
        default: ''
      latest-tag:
        type: boolean
        required: false
        description: Add latest flavor
        default: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
      upload-sarif-to-security:
        type: boolean
        required: false
        description: Upload Sarif reports to Github Security dashboard
        default: false
      chekov-linter-enabled:
        type: boolean
        required: false
        description: Run Chekov Linter
        default: true
      run-frank-till-healthy-enabled:
        type: boolean
        required: false
        description: Run Frank till the health endpoints returns 'HEALTHY'
        default: true
    secrets:
      token:
        required: false
    outputs:
      image-id: 
        value: ${{ jobs.build.outputs.image-id }}
      image-digest: 
        value: ${{ jobs.build.outputs.image-digest }}
      image-metadata: 
        value: ${{ jobs.build.outputs.image-metadata }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read 
    outputs:
      docker-meta-tags: ${{ steps.meta.outputs.tags }}
      docker-meta-labels: ${{ steps.meta.outputs.labels }}
      image-id: ${{ steps.build.outputs.imageid }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    steps:
    - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
      with:
        disable-sudo: true
        egress-policy: audit
        allowed-endpoints: >
          api.github.com:443
          auth.docker.io:443
          github.com:443
          production.cloudflare.docker.com:443
          registry-1.docker.io:443

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

    - name: "Download Pre-build Artifacts"
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #4.1.8
      with:
        pattern: pre-build-*
        merge-multiple: true

    - name: "Download Build Artifacts"
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #4.1.8
      with:
        pattern: build-*
        merge-multiple: true

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 #5.6.1
      with:
        images: ${{ inputs.registry-prefix }}/${{ inputs.docker-image-repo }}/${{ inputs.docker-image-name }}
        tags: |
          type=semver,pattern={{version}},value=${{ inputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
          type=semver,pattern={{major}},value=${{ inputs.version }}
          type=ref,event=pr
          type=raw,value=latest,enable=${{ inputs.latest-tag }}
        flavor: |
          latest=false

    - name: Set up QEMU
      uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a #3.3.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 #3.8.0

    - name: Build and export Docker image
      id: build
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d #6.12.0
      with:
        context: .
        platforms: linux/amd64
        outputs: type=docker,dest=image.tar
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: "Upload Docker tar"
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 #4.6.0
      with:
        name: build-docker-image
        path: ./image.tar
        retention-days: 1

  checkov-linter:
    runs-on: ubuntu-latest
    permissions:
      contents: read 
    if: inputs.chekov-linter-enabled
    steps:
    - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
      with:
        disable-sudo: true
        egress-policy: audit
        allowed-endpoints: >
          github.com:443
          pypi.org:443

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

    - name: Lint Dockerfile with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@50b959918599bb15388ef018e2f51c5e83e2d0e2 #12.2948.0
      with:
        directory: .
        framework: dockerfile
        check: 'LOW,MEDIUM,HIGH,CRITICAL'
        quiet: false
        soft_fail: true
        output_format: sarif 
        download_external_modules: true
        output_file_path: reports/checkov-results.sarif

    - name: Upload Sarif report as artifact
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 #4.6.0
      with:
        name: checkov-results
        path: reports/checkov-results.sarif

    - name: Upload to GitHub Security
      uses: github/codeql-action/upload-sarif@ee117c905ab18f32fa0f66c2fe40ecc8013f3e04 #3.28.4
      if: ${{ inputs.upload-sarif-to-security }}
      with:
        sarif_file: 'reports/checkov-results.sarif'
    
  # trivy-vulnerability-scan:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   -  
  #     name: "Download Docker tar"
  #     uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #4.1.8
  #     with:
  #       name: docker
  #       path: .
  #   # - 
  #   #   name: "Load Docker tar"
  #   #   run: |
  #   #     docker image ls -a
  #   #     docker load --input docker.tar
  #   #     docker image ls -a
  #   - 
  #     name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     env:
  #       RIVY_OFFLINE_SCAN: true
  #     with:
  #       input: 'docker.tar'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #       exit-code: '0'
  #       ignore-unfixed: true
  #       vuln-type: 'os,library'
  #       severity: 'CRITICAL'
  #       hide-progress: false
  #   - 
  #     name: "Upload Sarif report as artifact"
  #     uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 #4.6.0
  #     with:
  #       name: trivy-results
  #       path: trivy-results.sarif
  #   - 
  #     name: Upload to GitHub Security
  #     uses: github/codeql-action/upload-sarif@v2
  #     if: ${{ inputs.upload-sarif-to-security }}
  #     with:
  #       sarif_file: 'trivy-results.sarif'

  run-till-healthy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: inputs.run-frank-till-healthy-enabled
    needs: build
    steps:
    - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
      with:
        disable-sudo: true
        egress-policy: audit
        allowed-endpoints: >
          github.com:443

    - name: Download Docker tar
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #4.1.8
      with:
        name: build-docker-image

    - name: Load Docker tar
      shell: bash
      run: |
        docker load --input image.tar

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2
      with:
        token: ${{ secrets.token }}

    - name: Run till healthy
      uses: wearefrank/ci-cd-templates/frank-run-till-healthy@main
      with:
        image-id: ${{ needs.build.outputs.image-id }}

