name: Wait Till Docker Healthy Container
description: Waits till Docker container's health endpoint returns 'HEALTHY'.
inputs:
  container-id:
    description: >
      Docker container id of the container to wait for.

      Note: The Docker container needs to be created and available already.
    required: false
  image-id:
    description: >
      Docker image id used by the container to wait for.

      Note: The Docker container needs to be created and available already.
    required: false
  image-name:
    description: >
      Docker image name used by the container to wait for. For example: 'wearefrank/zaakbrug'.

      Note: The Docker container needs to be created and available already.
    required: false
  timeout-sec:
    description: >
      Maximum duration to wait for a healthy container.

      Default: 300
    required: false
    default: '300'
outputs:
  container-id:
    description: Id of the Docker Container that was waited on to report healthy status.
    value: ${{inputs.container-id || steps.from-image-id.outputs.container-id || steps.from-image-name.outputs.container-id}}

runs:
  using: "composite"
  steps:
    - name: List loaded Docker images
      if: runner.debug == '1'
      shell: bash
      run: |
        docker ps -aq --no-trunc

    - name: Container-Id From Image-Id
      id: from-image-id
      if: inputs.image-id != '' && inputs.container-id == ''
      shell: bash
      run: |
        echo "container-id=$(docker ps --latest -aqf ancestor=${{inputs.image-id}} --no-trunc)" >> "$GITHUB_OUTPUT"

    - name: Container-Id From Image-Name
      id: from-image-name
      if: inputs.image-name != '' && inputs.container-id == '' && steps.from-image-id.outcome != 'success'
      shell: bash
      run: |
        echo "container-id=$(docker ps --latest -aqf ancestor=${{inputs.image-name}} --no-trunc)" >> "$GITHUB_OUTPUT"

    - name: Container-Id Not Found
      if: inputs.container-id == '' && steps.from-image-id.outcome != 'success' && steps.from-image-name.outcome != 'success'
      shell: bash
      run: |
        echo "Container-Id could not be resolved with from image-id: [${{inputs.image-id}}] or image-name: [${{inputs.image-name}}]."
        exit 1

    - name: Wait Till Container Healthy
      env:
        TIMEOUT: ${{inputs.timeout-sec}}
        CONTAINER_ID: ${{inputs.container-id || steps.from-image-id.outputs.container-id || steps.from-image-name.outputs.container-id}}
      shell: bash
      run: |
        set -eux

        START_TIME=$(date +%s)

        while true; do
          if [ "$(docker inspect --format='{{json .State.Health.Status}}' $CONTAINER_ID)" = '"healthy"' ]; then
            echo "Application is healthy."
            break
          fi
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
            echo "Application did not become healthy within [$TIMEOUT] seconds. Failing the job."
            exit 1
          fi
          echo "Waiting for application to be healthy..."
          sleep 5
        done

    - name: Docker inspect, stats and logs
      if: failure() || runner.debug == '1'
      env:
        CONTAINER_ID: ${{inputs.container-id || steps.from-image-id.outputs.container-id || steps.from-image-name.outputs.container-id}}
      shell: bash
      run: |
        docker inspect $CONTAINER_ID
        docker logs $CONTAINER_ID
        docker stats --no-stream $CONTAINER_ID
      